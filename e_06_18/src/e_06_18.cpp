/*
演習6-18 0から9の乱数を作成する関数を作る。ただし、複数回呼び出したとき 連続して同じ値を返却しないようにする

作成日 2017年5月7日

作成者 平澤敬介
*/

#include<iostream>
// 現在時刻を定義しているライブラリ
#include<ctime>
// ランダム関数を定義しているライブラリ
#include<cstdlib>

using namespace std;

//乱数を発生させる関数を宣言している この関数を呼び出すと1つ前の値と比較して違う値を返却します。
int rand1();

int main()
{
	// 現在時刻で乱数の種を生成する
	srand(time(NULL));

	// 宣言 連続しない乱数を表示します
	cout << "連続しない乱数\n";

	// 配列の要素数分 乱数を発生さ表示を行うためループ処理を行う
	for(int i=0; i < 10; i++) {

		// 関数呼び出し部分 連続しない乱数を表示していきます
		cout << rand1() << " \n";
	}

	return 0;
}

//関数 重複しない関数 関数内部で静的記憶域期間を定義するだけで関数内部ですべて完了できる
//仮引数 無し
//返却値 前回呼び出したときと異なるint型の値

int rand1()
{
	int n = rand() % 3; // ０から２の乱数を発生させる 高確率で重複することになる
						// 関数内部で静的記憶域期間をもつ変数を定義する これで
						// 関数を呼び出しても値はリセットされない
	static int a;

		do{// do文 で前の値aと異なる値になるまでループで乱数を発生させる
			n = rand() % 3;		// 0～2の乱数を発生させていく

		// 前の値と比較して同じ場合、乱数を再発生
		}while(n == a);

		// 変数の値を更新し次に呼び出したとき重複しないようにする
		a = n;

	// 前回呼び出したときと異なる値を返却します
	return n;

}
