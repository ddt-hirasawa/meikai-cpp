#include"class.h"

using namespace std;

//2つの日付が正しいかどうかの等価演算子 ==
bool date::operator ==(const date& tmp)

{
	bool answer = false; //return を複数定義しないために bool型の変数を定義します デフォルトは 「 間違ってます 」
	//参照する tmp の西暦 と 比べるほうが等しい場合
	//次の項目に移ります
	if (this->y == tmp.y) {

		//参照する tmp の年 と 比べるほうが等しい場合
		//次の項目に移ります
		if (this->m == tmp.m) {

			//参照する tmp の日 と 比べるほうが等しい場合
			//bool型のtrueを返却します。
			if (this->d == tmp.d) {

				//西暦から比較していき、本当に正しいことを確認したら true
				answer = true;
			}
		}
	}
	//参照する 項目が1つでも違う場合
	//bool型のfalseを返却します
	return answer;
}

//2つの日付が異なっているかどうかの等価演算子 !=
bool date::operator !=(const date& tmp)

{
	bool answer = false;//return を複数定義しないために bool型の変数を定義します デフォルトは 「 間違ってます 」

	//参照する tmp の西暦 と 比べるほうが異なる場合
	// true を代入します
	if (this->y != tmp.y) {

		//参照する tmp の年 と 比べるほうが異なる場合
		//true を代入します
	} else if (this->m != tmp.m) {

		//参照する tmp の日 と 比べるほうが等しい場合
		//bool型のtrueを代入します。
	} else if (this->d != tmp.d) {

		//デフォルトが false なので更新します
		answer = true;
	}
	//参照する 項目が1つでも同じ場合
	//bool型のfalseを返却します
	return answer;
}

//2つの日付の大小を判定する関係演算子 > >= < <=
//同じ動作をするので 課題では  <= のみ使います
bool date::operator <=(const date& tmp)

{
	bool answer = false;//return を複数定義しないために bool型の変数を定義します デフォルトは 「 間違ってます 」

	//大小を比較するため、西暦からではなく一番細かいデータの日から比較します
	//
	if (tmp.d <= this->d) {

		if (tmp.m <= this->m) {

			if (tmp.y <= this->y) {

				answer = true;
			}
		}
	}

	return answer;
}
