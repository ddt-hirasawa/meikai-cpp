#ifndef CLASS_H_
#define CLASS_H_

#include<iostream>
#include<string>

class date{
public:
	int y,m,d;		// 西暦 月 日 を与えるデータメンバを構築する
	static int dmax[];	// 静的メンバ 1月から12月の末日を配列に保管している
	static int days_of_month(int y,int m);	//静的メンバ関数

public:
	// デフォルトコンストラクタ
	date();
	// コンストラクタ「
	date(int yy, int mm, int dd);
	//引数として与えた西暦はうるう年かどうかbool型で返却を行う関数
	static bool leap_year(int year)
	{
		// うるう年判別する部分 return で警告が消えないので
		// if文で同じようなものを作成
		if(year%4 == 0){
			int a=year%100;
			int b=year%400;
			if(a != 0 || b == 0)
				return true;
		}
				return false;
		//return year%4 == 0 && year%100 || year%400; 警告が消えない
	}

	//2つの日付が正しいかどうかの等価演算子 ==
	bool operator==(const date& tmp);

	//2つの日付がことなっているかどうかの等価演算子 !=
	bool operator!=(const date& tmp);

	//2つの日付の大小を判定する関係演算子 > >= < <=
	bool operator >= (const date& tmp);


	// 関数の宣言部分 すべて fanc.cpp にまとめる
	int year() const {
		return y;
	}
	int month() const {
		return m;
	}
	int day() const {
		return d;
	}

	bool leap_year() const {
		return leap_year(y);
	}
	date past() const;
	date future() const;

	int day_of_week() const;

	int day_of_year() const;

	std::string to_string() const;

};

std::ostream& operator << (std::ostream& s,const date& x);
std::istream& operator >> (std::istream& s,date& x);

#endif /* CLASS_H_ */
