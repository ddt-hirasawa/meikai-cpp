/*
 演習7-11 int型2次元配列の構成要素を縦横にそろえて表示する 各値の左端をそろえる

 作成日 2017年5月8日

 作成者 平澤敬介
 */

#include<iostream>

// 桁をそろえるためのsetw演算子を使うためのライブラリ
#include<iomanip>
// ランダム関数を定義しているライブラリ
#include<cstdlib>
// 現在時刻を定義しているライブラリ
#include<ctime>

using namespace std;

// 配列の要素を表示する関数の宣言
void print2d(int a[][5], int n);

int main() {
	// 現在時刻でもって乱数の種を生成する
	srand(time(NULL));

	int n = 5; 	//構成要素を1以上で得るためにdo文の外で変数を定義する

	// 1以上の整数値を得たいのでそれ以外を省きます
	do {
		// 1以上になるまでループを繰り返し 2次元配列を作る
		cout << "配列要素数(1以上) :";

		// 要素数をキーボードからの値で決めます
		//cin >> n;

	// 1以上でdo while 文を抜けます
	} while (n < 0);

	int a[n][5]; 	// 構成要素が決まったならば その数でn行5列の配列を作成する

	//各要素を-9999～9999までの乱数を作り格納する
	//これで様々な値で 数値の端をあっているかどうか確認する
	for (int i = 0; i < n; i++) {

		for (int j = 0; j < 5; j++) {

			a[i][j] = rand() % 10000;	// 各列 と行に 0～9999の間の乱数を発生させます

			//不規則にするため 符号に - を付けます
			if (rand() % 2 == 0) {

				// 2分の1の確率で マイナスの値になります
				a[i][j] *= -1;

			//不規則にするため 符号に + を付けます
			} else {

				// 2分の1の確率で プラスの値になります
				a[i][j] *= 1;
			}
		}
	}

	// 配列の構成要素をそろえて表示する関数を呼び出す
	// すべて関数内部での処理になる
	print2d(a, n);

	return 0;
}

//関数 配列の要素を表示する ただし、桁を左端にそろえて表示しなければならない
//仮引数 各行 列の先頭要素を指すポインタ a  その配列の行数を決める値 n
//

void print2d(int a[][5], int n) {

	// 行の数分走査するためにループ処理を行う
	for (int i = 0; i < n; i++) {

		// 列の数分走査するためにループ処理を行う
		for (int j = 0; j < 5; j++) {

			int tmp = a[i][j];		//変数tmpに絶対値にした要素を一時的に格納する

			// 構成要素を表示する iが0番目ならば左端に数値が表示されるが
			// 構成要素の桁や符号によって表示したときジグザグになってしまう
			if(tmp < 0) {

				// 絶対値にする
				tmp *= -1;
			}

			// if文を抜け、必ず絶対値となった値を表示する
			cout << a[i][j];

			// そのため、桁の数をカウントで求めてその数に応じて空白文字を
			// 表示することで左端を合わせます
			int keta = 0;				// カウンタ 絶対値の桁数分カウントします

			//桁数を出し終えるまで処理を繰り返します
			while (tmp > 0) {

				// 絶対値となった値を10で割り
				tmp /= 10;
				//カウントし続ける
				keta++;
			}
			//cout << " " << n << " ";
			if(a[i][j] < 0) {

				keta--;
			}

			//カウントした値で setw演算子を使い応じた幅で空白文字を表示させる
			cout << setw(10 - keta) << " ";

		}
		cout << "\n";
	}
}

