/*
演習7-4 typeid演算子を使って、List7-10の関数reverceの仮引数が配列ではなくポインタであることを確認せよ

作成日 2017年5月8日

作成者 平澤敬介
*/

#include<iostream>
// typeid演算子を使うためのライブラリ
#include<typeinfo>

using namespace std;

//関数の宣言 配列なのか ポインタなのか
void reverse(int a[],int n);

int main()
{
	const int max = 5;	//配列の要素数を定義します 変更しません
	int Int[max];			//int型の配列を宣言します 要素数は const をつけているので変更できません


	// 配列に値を代入するため要素数分繰り返し処理を行います
	for(int i=0; i < max; i++) {

		//どの配列の要素に代入するのか見えるようにします
		cout << "Int[" << i << "] : ";

		// キーボードからの値で要素の値が決まります
		cin >> Int[i];
	}
	// 変更点 typeid演算子により Int の型を表示している 配列
	cout << "配列 Int " << typeid(Int).name() << "\n";

	// 関数の呼び出し部分 並びを逆順にします
	reverse(Int,max);

	// 宣言 配列の要素を逆順にします
	cout << "要素の並びを反転しました。\n";

	// 配列の要素を表示するためループします
	for(int i=0; i < max; i++) {

		// 配列の要素を見やすくします
		cout << "Int[" << i << "] = " << Int[i] << "\n";
	}

	return 0;
}
//関数 配列の要素を逆順にする関数
//仮引数 配列の先頭要素のポインタ と 要素数
//返却値 無し

void reverse(int a[],int n)
{
	// 反転させるため、要素数の半分の繰り返し処理を行う
	for(int i=0;i < n/2;i++){

		int tmp = a[i];		//変数に値を一時的に保管します
		a[i] = a[n-i-1];	//先頭要素と最後尾の要素素を入れ替えていきます
		a[n-i-1] = tmp;		//最後尾の要素に保管していた値を代入します
	}
	// 変更点 typeid演算子によりaの型を表示している ポインタ
		cout 	<< "ポインタ a "<< typeid(a).name() << "\n";

		// 結論 配列ではなく ポインタです
		cout << " a は配列ではなくポインタです。\n";
}

//実行結果
/*c[0] : 5
c[1] : 4
c[2] : 5
c[3] : 6
c[4] : 4

配列c A5_i
配列a Pi

 a は配列ではなくポインタです。
要素の並びを反転しました。
c[0] = 4
c[1] = 6
c[2] = 5
c[3] = 4
c[4] = 5
 * ,main内の配列は A5_iと表示されは要素5の配列であることがわかる
 * 関数内でも配列があるため、同じ表示が出るようにも思えるが
 * 結果は Piと表示される Piはポインタのことなので関数内ではポインタが使われていることがわかる
 *
 *
 */
