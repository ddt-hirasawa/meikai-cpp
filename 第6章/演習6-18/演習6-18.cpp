// 演習6-18 0から9の乱数を作成する関数を作る。ただし、複数回呼び出したとき
// 連続して同じ値を返却しないようにする

#include<iostream>
// 現在時刻を定義しているライブラリ
#include<ctime>
// ランダム関数を定義しているライブラリ
#include<cstdlib>

using namespace std;

//乱数を発生させる関数を宣言している この関数を呼び出すと1つ前の値と比較して
// 違う値を返却します。
int rand1();

int main()
{
	// 現在時刻で乱数の種を生成する
	srand(time(NULL));
	cout << "連続しない乱数\n";

	// 配列の要素数分 乱数を発生さ表示を行うためループ処理を行う
	for(int i=0;i < 10;i++) cout << rand1() << " \n";

	return 0;
}

// 重複しない関数 関数内部で静的記憶域期間を定義するだけで
// 関数内部ですべて完了できる
int rand1()
{
	int n = rand() % 3; // ０から２の乱数を発生させる 高確率で重複することになる
	// 関数内部で静的記憶域期間をもつ変数を定義する これで
	// 関数を呼び出しても値はリセットされない
	static int a;

		do{// do文 で前の値aと異なる値になるまでループで乱数を発生させる
			n = rand() % 3;
		}while(n == a);
		// 変数の値を更新し次に呼び出したとき重複しないようにする
		a = n;

	return n;

}
