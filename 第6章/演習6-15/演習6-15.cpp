// 演習6-15 簡易的な時刻のプログラムの関数を作成 x 分経過後の時間の表示を行う

#include<iostream>

using namespace std;

void spend(int&,int&,int);// 関数の宣言 参照渡しにより 時 と 分 を与える

int main()
{
	int x,y,dy=0;// x : 時 y : 分 dy : 加算する値 加算しない時0分後を表示するため0で初期化する
	// 時を入力する部分
	do{
		// 1日は24時間なのでその範囲での入力のみ受け付けます
		cout << "何時(0～23) :"; cin >> x;
	}while(x < 0 || x > 23);

	// 分を入力する部分
	do{
		// 1時間は60分なのでその範囲での入力のみ受け付けます
		cout << "何分(0～59) :"; cin >> y;
	}while(y < 0 || y > 59);

	// 与えた引き数で現在時刻を表示する部分 24時間の時間表記になる
	cout << "現在時刻 " << x << " 時 " << y << " 分です。\n";

	// 何分経過したのか処理する部分 経過時間を入力し 現在時刻に反映させる
	cout << "何分後 :"; cin >> dy;

	// 関数呼び出し部分 時 分 経過時間 を与える と経過時間分 x　yが加算される
	spend(x,y,dy);

	// 関数を通過した値で現在時刻を表示する部分 時 が24になったり yが61になったりはしない
	cout << dy << " 分後   " << x << " 時 " << y << " 分です。\n";

	return 0;
}

// 参照渡しにより 値を更新する関数 参照渡しを行うのは
// 時と分だけで良い 経過時間は参照渡しを行わない
void spend(int& a,int& b,int dy)
{
	int c = 0; // カウント用 dy分後したとき何時間立つのかカウントする

	// 分をdy分経過させる部分 この時点ではb は60の範囲を超えてしまう
	b += dy;

	// 分が60 を超えたとき 分を0に戻すためにif文を使う
	if(b > 59)
		// 分が60以下になるようにbから1時間分 分を引いていく
		// 引いた回数を数えるために ループを行う
		do{
			b -= 60; c++;
		}while(b > 59);

	// 時 a にカウントした値を加算する この時点では a は24の範囲を超えてしまう
	a += c;

	// 時が24 を超えたとき 時を0に戻すためにif文を使う
	if(a > 23)
		// 日の引数はないのでカウントをせずに 1日分の時間を引いていく
		// 1日分ずつ引いていくためにループ処理を行う
		do{
			a -= 24;
		}while(a > 23);
}
