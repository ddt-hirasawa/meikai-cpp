// 演習7-14 変数idxと同じ要素の 配列の番号を配列に格納する関数の作成
			// また、同じ要素が何個あったのか返却する

#include<iostream>

using namespace std;

// 関数の宣言　idxと同じ数字の数を返却する関数
int search_idx(int*,int*,int,int);

int main()
{
	int a[10];//数値を入力し値を格納する配列 代入するため初期化は不要
	int b[10];//idxと同じ要素の配列の番号を格納する配列 すべて同じ値のとき様に
			// 要素数分の配列が必要
	int idx;//探す値をキーボードから入力するために定義する  代入するため初期化は不要
	int n;	//同じ要素の数が返却されてくるので変数を定義しそれに代入する

	//配列の要素の代入を行う部分
	// 要素数分ループすることで入力を行う
	for(int i=0;i<10;i++){
		cout << "a[" << i << "] : ";
		cin >> a[i];
	}

	// 配列の中身を表示する部分
	//要素数分繰り返し処理を行うことで値の表示を行う
	for(int i=0;i < 10;i++){
	if(i == 0)
		cout << "{ ";
	if(i >= 0)
		cout << a[i];
	if(i < 9)
		cout << " ,";
	}

	cout << " }\n";

	//探す値をキーボードから入力する
	// 同じ値が無ければ意味がないので表示した値を見て入力する
	cout << "探す値 : "; cin >> idx;

	// 関数呼び出し部分 同じ要素が発見された回数だけ返却される
	n = search_idx(a,b,10,idx);

	// 配列の番号を表示する部分 見つけた数分ループ処理を行うことで
	// 配列の番号の表示を行っていく
	for(int i=0;i < n;i++){
		if(i == 0)
			cout << "{ ";
		if(i >= 0)
			cout << b[i];
		if(i < n-1)
			cout << " ,";
		}
	cout << " }\n";

	//最後に見つかった個数を表示する
	cout << n << "個見つかりました。";

	return 0;
}

// idxと同じ数字の数を返却する関数
int search_idx(int* a,int* idx,int n,int key)
{
	int cnt = 0; // 関数内部で カウントに使う変数を定義する発見したときのみインクリメントされる
	// 配列の全要素を操作するためループ処理を行う
	for(int i=0;i < n;i++){
		//ポインタの指すオブジェクトが同じ値だった場合if文に入りカウントが行われる
		if(*a++ == key){
			// if文に入ったときのみ idxのポインタが移動するので　i とは別の位置を指すことにナル
			*idx++ = i;
			//if文に入ったときのみカウントが行われる
			// 動的記憶域期間に変数があるため関数の呼び出しが終われば
			// カウントは0に戻る
			cnt++;
		}
	}
	return cnt;
}

