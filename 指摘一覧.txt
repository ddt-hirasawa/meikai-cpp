--- C++指摘一覧 ---
1-8
  ・代入する値が整数です。実数を代入して確認してください。

1-13
  ・24行目、出力全てを1行で書いていて見辛いです。
    改行も含まれているので、改行で出力行を分け、見やすくしてください。

1-14
  ・変数が何を指しているか分かり辛いです。
    1章全てにいえる事ですが、練習も兼ねて1-14は全ての変数名を意味のある名前に修正してください。
    例:x → valueX や inputNumber 等


********************************************************  
2章以降、修正がある場合に限り、変数名も修正してください。
********************************************************

2-1
  ・if文の{}を省略しています(可能であり動作もします)が、バグの元のなるため必ず{}記載するようにしてください。
    1行にまとめている場合でも同様です。以降同様に修正をお願いします。

2-2
  ・2-1と同じくif文の{}を記載してください。

2-3
  ・if文が非常に読みづらくなっています。C言語の歴史的に行数を少なくするという事があるかもしれませんが、
    現在のコンピューターでは1行2行増えた所でどうという事はありません。
    改行を行い、見やすくしてください。(順番に見ているため後半が問題無い場合はすみません)
      ※1:プログラム作成時のコツは、まず { } を作成してから中身を書くと良いです。
      ※2:条件式の後に改行を入れてから{ を記載するパターンもありますが、下記例のパターンをお勧めします
  例
  if (numberA > numberB){
      //Aの方が大きい処理
  }else if (numberA < numberB){
      //Bの方が大きい処理
  }else{
      //どちらも等しい処理
  }

2-4、2-5
  ・2-3と同じく見やすく修正してください

2-6
  ・2-1、2-3と同様の修正をお願いします。

2-7
  ・2-1、2-3と同様の修正をお願いします。
  ・変数:max を用いた形式に修正してください。
  ・条件式には、三項演算子(条件演算子の一つ)を使用してください。記号は"?"になります

2-8
  ・2-7の修正と同じ修正をお願いします。変数はmaxではなく、diff(差)として作成してください。
  
2-9
  ・似たような処理を2回実行しているような形になっています。
    2-8と同様の修正を加えた上で、if-elseは1つで作成し直してください。
    (パチっと当てはまるはずです)

2-10
  ・2-1,2-3と同様の修正をお願いします。
  ・細かいですが、14行目を2行に分けた方が読みやすくなります。修正してください。
  ・ifの条件文では、小さい値を左側、大きい値を右側にするよう統一すると読みやすくなり、バグも減らすことが出来ます。
    例外はありますが、基本これで問題無いので、例を参考にして修正してください。(条件演算子が重要)
    例
    if (numberB <= min) {
      min = numberB ;
    }else if (numberC <= min) {
      min = numberC ;
    }

2-11
  ・変数名がおかしいです。aveは平均を表すように見えるので、中央値(medium)を使用してください。
  ・バグがあります、A = 1, B = 2, C = 1 で実行した場合、想定は1ですが、2が返ってきます。確認してください。
  ※ヒントとして、無理やり条件に当てはめたり、例外パターンを用意したりするとバグが発生しやすくなります。
    シンプルに、上から順番に流れたパターンで考えてみてください。最初にAを仮の値とするのはOKです。

2-12
  ・29行目、コメント切れ？不備があるため修正してください。

2-16
  ・乱数を使用するのではなく、整数値を入力して、入力された値に応じた月を返すようなプログラムを作成してください。
    その際、1～12以外の値が入力されたパターンも考慮してください。

2-18
  ・上部コメントについて：誤記ではないです。 if (a = 0) で問題を解いてください。(イコール1個)
    ヒントとして、if(a = 1)として実行して結果を確認してみてください。
    解答としてはコメントでどのような動作をするか記載してください。
    ※ただし、本来であれば、このような使い方は誤解を生みやすいため滅多に使用しません。(多分)
      柴田は経験が浅いため使用例が挙げれませんが、現場ではこのような手法を取っている可能性があります。
      テクニックの一つとして頭の片隅に置いておくとソースを読むのに役立ちます。


*******************************************************************************************
3章以降は共通の指摘は基本していません。修正に合わせ今までの共通的な指摘も反映してください。
*******************************************************************************************


3-1
  ・do whileのインデントが行われていません。ブロックごとにインデントを付けるようにしてください。
  例 (□は半角スペース、又はタブです。スペース量は半角4つ分が目安です。)
    do {
    □□//処理1
    □□//処理2
    □□//処理3...
    }while (条件式)

3-2
  ・do whileの条件式で a!=bを使用していますが、この条件は危険です。
    もし、偶数を出力等で+=2であった場合等に無限ループとなる恐れがあります。
    条件を以下や未満にして、無限ループの可能性を出来るだけ減らしたコードとしてください。
  ・最後の「不足分を出力する」処理を使わずに要件を満たすようなプログラムに修正してください。
    一つ目の修正で大体解決すると思います。

3-4
  ・15行目、コメントが嘘をついています。修正してください。

3-11
  ・19行目、誤記修正をお願いします。

3-14
  ・17行目あたり、不要と思われる条件文とコメント(//のみ)が存在しています。削除してください。

3-20
  ・for文の初期値が1から始まっていますが、0から始めるように修正してください。(nから始まるのはそのままでOKです)
  ※後の配列で出てると思いますが、配列添え字は0から始まるため、for文の初期値は0にしておきます。
    場合により0以外の値で開始しますが、基本は0から始めるよう心がけてください。
  ※これより前でも同じような物がありますが、例として3-20を挙げています。

3-24
  ・19行目のif文終了の閉じ括弧のインデントがズレています。
  ・コメントの位置は変数の宣言であれば右側に、処理であれば処理の上に書くように統一してください。

3-25
  ・28行目 goto文は｢絶対に｣使用しないでください。今回のようにシンプルであればまだいいですが、
    プログラムが大きくなった場合、どうしようもなくなってしまい｢とても危険｣です。
    goto文を使用しない形に書き換えてください。
    なお、while文の条件は評価値がtrueかfalseかで判断します。
  ※プログラムは上から下に全て流れ切るのが良いプログラムになります。
    うまく流せるように考えてプログラミングしてください。
  ※絶対にと記載しましたが、現場によっては使用する場合もあるかもしれません。
    その場合明確なルールがあるはずですのでそれに従ってください。無い場合は使用しないのが正しいです。

3-26
  ・インデントが不適切なので非常に読みづらいです。正しいインデントを付けてください。
  ※WindowsでEclipseを使用してる場合、Ctrl+Shift+Fを押すといい感じに揃えてくれたりします。
    意図しないフォーマットになる場合もあるので多用は注意です。


4-2
  ・式及び出力結果は正しいです。よく考えてあり良いです。ただ、プログラムが長くなりすぎています。
    教本記載の"操作子"を使用した単純なプログラムを[4-2-2]として新規作成してください。
    宣言部等を除いたロジック部が10行未満となるはずです。


4-4
  ・考察がNGです。文字列リテラルは8バイト使用しません。その他も同じです。
    重要ですので、"バイト(Byte)"と"ビット(bit)"の違いを再確認してください。


4-5
  ・float型とdouble型の出力結果が同じになる事はありません。(桁数が少なければ同じにはなります。)
    setprecision演算子を使用した形に修正し、再確認してください。

4-13
  ・作成されていないようです。作成してください。(p165)


5-3、5-4
  ・インデントを再確認してください。

5-5
  ・このロジックだとごく稀に同じ値が2つ(又はそれ以上)入ります。このままだと5-3とあまり変わりません。
    生成した乱数を全ての値と比較するロジックとして作り直してみてください。
  ※どういう処理をしているかを紙に書きだしてみると分かりやすいかもしれません。

5-8
  ・このロジックだとごく稀にシャッフル後の値がおかしくなります。理由は5-5と同様です。
    配列は一つのみ使用して、作り直してください。
  ※処理のイメージは、一列に並べたトランプを一つずつ入れ替えるイメージになります。

5-11
  ・コンパイル時、二次元配列の初期化部分で警告が出ています。解決策を調べ修正し、警告が出ないようにしてください。
  ※Eclipseであれば黄色波線が引かれていると思います。

5-12
  ・「要素数を求める"式"を示せ」とあるので、式を出力してください。
  ・要素が何個か(全部で何個か)、という出力がありません。追加してください。


6-3
  ・関数内でのreturn句は一つで済ませるようにしてください。修正をお願いします。
  ※例外として異常系の処理は関数上部でreturnさせるという手法がありますが、今回は例外は無いものとします。

6-17
  ・この書き方でも正解ですが、関数内部で静的な変数を用意する事が可能です。
    関数内部で宣言する形に書き換えてみてください。

7-4
  ・23行目と27行目の文字列出力において、このコメントの前後に配列aという物が存在しておらず、ぱっと見でわかりません。
    実際に配列aの値を出力している関数内で出力するようにしてください。
  ※細かいですが、同じ機能や関連する機能を別々の所に置くのは好ましくありません。
    reverse関数が「"反転"と"配列aのタイプ出力"」という機能を持った関数として考えてください。
    (本来であればさらに別々にするべきですが、今回はまとめて良い事とします。)

7-6
  ・最終出力の配列の添え字番号が間違っています。修正してください。
  ・関数の引数部分でconstを使用している理由を再確認してください。
    認識済みであればOKです(この指摘に対する修正は不要)

7-11
  ・入力の配列数に関わらず、必ず3列しか出力されていません。修正してください。
  ・桁を揃える処理が正しく動作していません。確認し修正してください。(考え方はOKです。)

7-15
  ・new演算子で作成されたオブジェクトが破棄されていません。破棄するように修正してください。
  ※小さいプログラムであり、すぐ終了するためあまり意味はありませんが、
    今後の開発においてオブジェクト破棄は重要であるため、癖を付ける意味でもお願いします。

7-16
  ・異常発生の処理はtry～catch句を使用してください。
  ・作成したオブジェクトが破棄されていません。破棄するよう修正してください。

7-17
  ・コメントがありません、理解するのは難しいと思いますが記載してください。
    ポインタとメモリ構造を考えつつやると理解できるかもしれません。
    (偉そうな事を言っていますが柴田も理解しきれてはいません・・・)

8-3
  ・for文の条件式でa[i]と使用してループできる理由を再確認しておいてください。
    (この指摘に対する修正は不要です。)

8-5
  ・8-3で使用している手法でfor文の条件が記載可能です。
    どのような値を参照しているか、ポインタが指す値が何かを考えながら修正してみてください。

8-11
  ・文字コードの差を使用して値を求める事ができます。この形に修正してください。
    修正時のcase文は注意してください。返り値は正の値、0、負の値となります。
    (修正後、もっとシンプルになります。)

8-12
  ・検索対象文字列の中に、調べたい文字が2個以上ある場合、結果がおかしくなります。修正してください。

8-13
  ・return句が複数あるので1番最後の1か所のみで済むように修正してみてください。
    また、処理として通らないけど警告が出るから追加したようなロジックは、
    正しくないロジックである可能性が非常に高いです。注意してください。

8-15
  ・cstringライブラリを使用してシンプルな形に書き直してみてください。

8-18、8-19
  ・数値以外の文字列が含まれていた場合、0(8-19は0.0)を返却するように修正してください。
  ※マイナスが考慮出来ています、良いです。

9-1
  ・非常に単純になります。元の関数仕様を頭から外し、
    ｎの階乗を求めるプログラムを作成せよ の課題だと思って再度作成してみてください。

9-5
  ・関数内のwhile文の条件が危険な条件となっています。インクリ、デクリの際の条件は
    大なり小なり記号(<,>,<=,>=)で記載するように心がけてください。

9-6、9-9
  ・goto文があります。使用しない形に修正してください。(3-25と同じです。）

10-1
  ・クラス内部のメンバ変数は先頭小文字で記載してください。(その際同名変数に注意)
    メイン処理内部の21行目も同様です。
    クラス名は先頭大文字で、変数は先頭小文字のキャメルケース、
    定数は全て大文字のスネークケースで記載するのが一般的です。
  ・変数名、せっかくなので英語にしてみましょう。weight、height等
  ※ローマ字読みだと笑われてしまいます…翻訳サイト駆使レベルでOKです。

10-2
  ・gotoは使用してはいけません。(3-25と同様)
  ・教本は無限ループになっていますが、無条件の無限ループは使用すべきではありません。
    使わない形に書き換えてみてください。
  ・燃料の追加処理がありますが、タンクが空の場合にタンク容量と同等の給油をすると到達しません。
    仕様は自分で決めるため、意図的であれば問題ありませんが、確認してください。
  ・タンク容量以上のガソリンを給油すると無限ループしてしまいます。確認し修正してください。
  ・せっかくなので作成した関数をメイン処理のどのタイミングでも呼び出せるようにしてみましょう。

11-1
  ・追加する秒が60秒以上で、追加された分が60以上になる場合に、60分と表示されてしまいます。
    時間も同様です。うまく関数を使用して修正してみてください。(部品の再利用)
  ・22行目、クラス TOKYOではなく、TimeクラスでTOKYOオブジェクトを作成します。
  ・オブジェクト名は変数と同じく先頭小文字のキャメルケースで記載してください(tokyo、tokyoTime等)
  
11-3
  ・大量のコメントアウトがあります。不要コードは削除してください。

11-5
  ・出力結果が違います。公式を見直してください。
    また、実行時は自分で計算できる値を入れて試すと間違いが発見しやすくなります。

12-1
  ・クラス名先頭は大文字を使用してください。
  ・後置演算子の場合、インクリメント"前の値を返却"して、インクリメントするため処理が複雑になります。
    また、保持するために自身のコピーを作成する必要があるため、処理コストが上がります。
    説明だけですが意識してみてください。

12-2
  ・否定演算子(!)の使用時、もっと単純になります。式を評価した値も返却できるので、そのように修正してください。
  ※昔の柴田は出来ていませんでした。気負いしなくて大丈夫です。

12-3
  ・作成するのはDateクラスでなくTimeクラスとなっているはずです。修正してください。
  ・+=演算子(Time型+int型)及び、-=演算子(Time型-int型)も作成してみてください。intの値は秒と扱ってOKです。
  ・追加されている前置++演算子の処理が長くなりすぎています。13-1のように切り分けるのがベストです。
    13-1で作成済みのためこの指摘に対する修正は不要です。(Timeクラスに直すのは必要)

13-1
  ・今年は閏年ではありません。チェック処理を確認してください。(単純ミスと思われます)
  ・大小チェックの演算子が挿入子(<<)になっています。比較演算子(<、>=等)で作成してください。
    これでも動作はするのですが、ルールに沿っていないため、重大なバグの元になります。
    また、同じ動作をする演算子の場合は、既に作成済みの演算子を再利用する事も可能です。

ここまでで一言。楽をしようとするとかえって大変になります。省略するにしても正しい省略を心がけてください。
社長からも同じ事を教えてもらうと思いますが、私からも伝えておきます。非常に大事です。
※柴田も楽しようとしたときはほとんど痛い目に合っています。バグが出まくったり修正に時間がかかったり…

14-1
  ・プログラムとしてはOKです。ですが折角クラスを作成したので、別の値を入れてその値を表示させてみてください。
    例として、Test1クラスを使用してオブジェクトを複数作成し、
    コンストラクタ及びデストラクタでその値を表示させてみてください。

14-2
  ・演習の問題に記載はありませんが、配列要素外にアクセスした時の処理が存在していません。
    教本に記載があるので真似して作成してみてください。作成するのは例外処理になります。

14-3
  ・ちゃんと動いてないです(文字化けしちゃってます)。再確認してください。
    ヒント：コンストラクタで文字列の先頭ポインタと領域を取得する所までは良かったのですが、
            その後何かが抜けています。ほんのちょっと修正するだけで直るので考えてみてください。
  ・仕様は自分で決めていいのでいいのですが、+演算子は大文字にするのではなく結合っぽくないでしょうか。
    仕様が結合である＋演算子をもう1個作成してください。又は+=演算子を作成してください。
    前のを削除せずそのまま追加で作成できるはずです。
    作成する際はreturnする値に注意してください。自分自身のオブジェクトを返すのか、一時的なポインタを返すのか等々…
  ・ヘッダー(.h)に処理(実装)が沢山書かれちゃっています。実装はコード(.cpp)側に記載するのがC++のルールのようです。
    パッと見で見辛いなと思ったりはしなかったでしょうか。又は何故分けるのだろうとか。
    ほぼ移動させるだけになるので移動させてください。(短い1､2行程度の物であればヘッダに記載してOKとします。)
    ただ、この件について柴田は詳細を知りません。時間のある時に「C++ ヘッダ 処理」あたりでググって調べてみてください。

14-4
  ・配列を可変で持てるようになるのがこのクラスの良い所です。
    定数でも構わないので、完全な固定値でなく、変数を用意してその値を使用して処理を実行してみてください。
    クラス側の処理はOKです。