/*
演習8-7 文字列中に含まれる数字の数を配列に格納していく関数の作成

作成日 2017年5月8日

作成者 平澤敬介
*/

#include<iostream>

using namespace std;

 // 数字を検出する関数 配列の番号でカウントしていく
void count_digits(const char* s,int c[]);

int main()
{
	char moji[] = "1dgf20hfdgd3h5h9f6hf7hfd57hf83h4g74"; // 数字を含む文字列ランダムに文字列を作成しました
	int math[10] = {0};								// 数字文字を格納する配列 カウントするため配列要素を0で初期化

	cout << "文字列 moji =" << moji << "\n";

	// 関数呼び出し部分 配列 a の要素をポインタを使って操作する
	count_digits(moji,math);

	// 0から9までの配列の要素の表示を行うためループ処理を行う
	for(int i=0;i < 10;i++) {

		//関数により数字のカウントが代入された配列0～9までを表示する
		cout << "math[" << i << "] = " << math[i] << "\n";
	}

	return 0;
}

//関数 数字を検出する
//仮引数 数字を探す配列の先頭を指すポインタ *s と 数字をカウントした値を代入する配列 c
//返却値 無し

void count_digits(const char* s,int c[])
{
	// ポインタでナル文字まで走査して全要素を見る
	for(int i=0; s[i]; i++) {

		//文字列で０から９の文字があった場合
		//そのポインタでswitch文に入る
		if(*(s+i) >= '0' && *(s+i) <= '9') {

			// 文字列でswitchするため caseも文字列で受け取ることになる
			switch(*(s+i)){

			//配列 0番目 の要素をインクリメント 0を発見しました
			case('0') : c[0]++; break;

			//配列 1番目 の要素をインクリメント 1を発見しました
			case('1') : c[1]++; break;

			//配列 2番目 の要素をインクリメント 2を発見しました
			case('2') : c[2]++; break;

			//配列 3番目 の要素をインクリメント 3を発見しました
			case('3') : c[3]++; break;

			//配列 4番目 の要素をインクリメント 4を発見しました
			case('4') : c[4]++; break;

			//配列 5番目 の要素をインクリメント 5を発見しました
			case('5') : c[5]++; break;

			//配列 6番目 の要素をインクリメント 6を発見しました
			case('6') : c[6]++; break;

			//配列 7番目 の要素をインクリメント 7を発見しました
			case('7') : c[7]++; break;

			//配列 8番目 の要素をインクリメント 8を発見しました
			case('8') : c[8]++; break;

			//配列 9番目 の要素をインクリメント 9を発見しました
			case('9') : c[9]++; break;

			}
		}
	}
}
